--- qtbase/src/corelib/thread/qthread_win.cpp	Fri Sep 16 01:49:42 2016
+++ qtbase/src/corelib/thread/qthread_win.cpp	Thu Jun  8 15:17:24 2017
@@ -122,6 +122,17 @@
     qt_create_tls();
     QThreadData *threadData = reinterpret_cast<QThreadData *>(TlsGetValue(qt_current_thread_data_tls_index));
     if (!threadData && createIfNecessary) {
+/** recovered from Qt4 for QtJambi5 **/
+        QThread *adopted = 0;
+        if (QInternal::activateCallbacks(QInternal::AdoptCurrentThread, (void **) &adopted)) {
+            Q_ASSERT(adopted);
+            threadData = QThreadData::get2(adopted);
+            TlsSetValue(qt_current_thread_data_tls_index, threadData);
+            adopted->d_func()->running = true;
+            adopted->d_func()->finished = false;
+            static_cast<QAdoptedThread *>(adopted)->init();
+        } else {
+/** end */
         threadData = new QThreadData;
         // This needs to be called prior to new AdoptedThread() to
         // avoid recursion.
@@ -135,6 +146,9 @@
             QT_RETHROW;
         }
         threadData->deref();
+/** recovered from Qt4 for QtJambi5 **/
+        }
+/** end */
         threadData->isAdopted = true;
         threadData->threadId = reinterpret_cast<Qt::HANDLE>(quintptr(GetCurrentThreadId()));
 
